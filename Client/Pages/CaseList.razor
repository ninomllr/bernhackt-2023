@page "/case-list"

@using System.Text.Json
@using thorstopper.Client.Services
@using thorstopper.Client.Data

<PageTitle>Auftragsliste</PageTitle>

<h1>Auftragsliste</h1>

<MudGrid>
  <MudItem md="6" lg="6" Class="d-flex">
    <MudTable
      Items="@Elements.Take(4)"
      Hover="true"
      Breakpoint="Breakpoint.Sm"
      @ref="mudTable"
      RowClassFunc="@SelectedRowClassFunc"
      OnRowClick="RowClickEvent"
      T="Case"
    >
      <HeaderContent>
        <MudTh>Auftragsnummer</MudTh>
        <MudTh>Kundenname</MudTh>
      </HeaderContent>
      <RowTemplate>
        <MudTd DataLabel="Nr">@context.CaseNumber</MudTd>
        <MudTd DataLabel="CustomerName">@context.CustomerName</MudTd>
      </RowTemplate>
    </MudTable>
  </MudItem>
  
  <MudItem md="6" lg="6" Class="d-flex">
    @* Init map into page *@
    <div id="map" style="width:100%; height:400px;"></div>
  </MudItem>
</MudGrid>

@code {


[Inject] NavigationManager NavigationManager { get; set; }
[Inject] ICaseService CaseServiceInstance { get; set; }


private int selectedRowNumber = -1;
private MudTable<Case> mudTable;
private List<string> clickedEvents = new();

// Use JavaScript in Blazor
[Inject] IJSRuntime JsRuntime { get; set; }
// Use Http request (Axios in JS) in Blazor
[Inject] HttpClient HttpClient { get; set; }

private LeafletService LeafletService { get; set; }
private DotNetObjectReference<LeafletService> LeafLetServiceRef { get; set; }


// Action after Blazor render
protected override async Task OnAfterRenderAsync(bool firstRender)
{
  if (firstRender)
  {
    // Connection with JS script 
    await JsRuntime.InvokeAsync<object>(
      "leafletApiJsFunctions.initialize",
      Elements,
      LeafLetServiceRef);
  }
}

private IEnumerable<Case> Elements;

protected async override void OnInitialized()
{
  LeafletService = new LeafletService();
  Elements = await CaseServiceInstance.GetCases();
  LeafLetServiceRef = DotNetObjectReference.Create(LeafletService);

  LeafletService.Notify += OnNotify;
}

// Callback 
private async Task OnNotify()
{
  await InvokeAsync(StateHasChanged);
  Console.WriteLine($"{LeafletService.Longitude}, {LeafletService.Latitude}");
}

public void Dispose()
{
  LeafletService.Notify -= OnNotify;

  LeafLetServiceRef?.Dispose();
}

private void RowClickEvent(TableRowClickEventArgs<Case> tableRowClickEventArgs)
{
  NavigationManager.NavigateTo("/case-detail", forceLoad: false);
}

private string SelectedRowClassFunc(Case element, int rowNumber)
{
  if (selectedRowNumber ==
  rowNumber)
  {
    selectedRowNumber = -1; clickedEvents.Add("Selected Row: None");
    return string.Empty;
  }
  else if (mudTable.SelectedItem != null &&
    mudTable.SelectedItem.Equals(element))
  {
    selectedRowNumber = rowNumber;
    clickedEvents.Add($"Selected Row: {rowNumber}"); return "selected";
  }
  else
  {
    return string.Empty;
  }
}
} 
