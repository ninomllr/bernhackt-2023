@page "/"

@using thorstopper.Client.Services
@using thorstopper.Client.Data
@implements IDisposable

<PageTitle>Auftragsliste</PageTitle>

<h1 class="mb-6">Auftragsliste</h1>

<MudGrid>
  <MudItem xs="12" md="12" lg="12" Class="d-flex" Style="width: 100%" >
    <MudTable
      Items="@Elements.Take(6)"
      Hover="true"
      HorizontalScrollbar="true"
      Breakpoint="Breakpoint.Sm"
      @ref="mudTable"
      T="Case"
      Style="width: 100%"
    >
      <HeaderContent>
        <MudTh>Auftragsnummer</MudTh>
        <MudTh>Auftragname</MudTh>
        <MudTh>Kundenname</MudTh>
        <MudTh>Adresse</MudTh>
        <MudTh>Datum</MudTh>
        <MudTh>Bounty</MudTh>
        <MudTh>Aktionen</MudTh>
      </HeaderContent>
      <RowTemplate>
        <MudTd DataLabel="Nr">@context.CaseNumber</MudTd>
        <MudTd DataLabel="CaseName">@context.CaseName</MudTd>
        <MudTd DataLabel="CustomerName">@context.CustomerName</MudTd>
        <MudTd DataLabel="Address">@context.Address</MudTd>
        <MudTd DataLabel="Date">@context.Date</MudTd>
        @if (context.Bounty != null)
        {
          <MudTd DataLabel="Bounty">
            <MudChip Variant="Variant.Text" Color="@((bool)context.Bounty ? Color.Success : Color.Error)">@((bool)context.Bounty ? "Ja" : "Nein")</MudChip>
          </MudTd>
          
        }
        else
        {
          <MudTd DataLabel="Bounty">
            <MudChip Variant="Variant.Text" Color="Color.Dark">--</MudChip>
          </MudTd>
        }
        
        <MudTd DataLabel="Actions">
          <MudIconButton Icon="fas fa-edit" Color="Color.Primary" OnClick="@(() => RowClickEventDetails(context.CaseNumber))"></MudIconButton>
          <MudIconButton Icon="fas fa-file" Color="Color.Secondary" OnClick="@(() => RowClickEventOffer(context.CaseNumber))"></MudIconButton>
        </MudTd>
      </RowTemplate>
    </MudTable>
  </MudItem>
  
  <MudItem xs="12" md="12" lg="12" Class="d-flex">
    @* Init map into page *@
    <div id="map" style="width:100%; height:400px;"></div>
  </MudItem>
</MudGrid>

@code {
  [Inject] NavigationManager NavigationManager { get; set; }
  [Inject] ICaseService CaseServiceInstance { get; set; }
  [Inject] IEmergencyService EmergencyServiceInstance { get; set; }
    
  private int selectedRowNumber = -1;
  private MudTable<Case> mudTable;
  private List<string> clickedEvents = new();

  // Use JavaScript in Blazor
  [Inject] IJSRuntime JsRuntime { get; set; }
  // Use Http request (Axios in JS) in Blazor
  [Inject] HttpClient HttpClient { get; set; }

  private LeafletService LeafletService { get; set; }
  private DotNetObjectReference<LeafletService> LeafLetServiceRef { get; set; }


  // Action after Blazor render
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      // Connection with JS script 
      await JsRuntime.InvokeAsync<object>(
        "leafletApiJsFunctions.initialize",
        Elements, Emergencies, null,
        LeafLetServiceRef);
    }
  }

  private IEnumerable<Case> Elements;
  private IEnumerable<Emergency> Emergencies;

  protected override async void OnInitialized()
  {
    LeafletService = new LeafletService();
    Elements = await CaseServiceInstance.GetCases();
    Emergencies = await EmergencyServiceInstance.GetEmergency();
    LeafLetServiceRef = DotNetObjectReference.Create(LeafletService);

    LeafletService.Notify += OnNotify;
  }

  // Callback 
  private async Task OnNotify()
  {
    await InvokeAsync(StateHasChanged);
    Console.WriteLine($"{LeafletService.Longitude}, {LeafletService.Latitude}");
  }

  public void Dispose()
  {
    LeafletService.Notify -= OnNotify;

    LeafLetServiceRef?.Dispose();
  }

  private void RowClickEventDetails(int id)
  {
    NavigationManager.NavigateTo($"/case-detail/{id}", forceLoad: false);
  }
  
  private void RowClickEventOffer(int id)
  {
    NavigationManager.NavigateTo($"/offers/{id}", forceLoad: false);
  }
  
} 
