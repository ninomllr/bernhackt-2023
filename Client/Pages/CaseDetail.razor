@page "/case-detail/{ParamId}"
@using thorstopper.Client.Data
@using thorstopper.Client.Services

<PageTitle>Auftragsdetails</PageTitle>

<h1>Auftragsdetails</h1>

<MudGrid>
  <MudItem xs="6" Class="d-flex justify-content-center">
    <MudChip Variant="Variant.Filled" Color="Color.Success">KI Riskscoring @AiPredictionRiskScore</MudChip>
  </MudItem>
  <MudItem xs="6">
    <div id="map" style="width:100%; height:400px;"></div>
  </MudItem>
</MudGrid>

<MudButton Variant="Variant.Filled" OnClick='@((e)=> NavigateTo("/case-list"))'>Zurück</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick='@((e)=> NavigateTo("/offers"))'>Offerten anschauen</MudButton>

@code {
[Inject] NavigationManager NavigationManager { get; set; }
[Inject] ICaseService CaseServiceInstance { get; set; }
// Use JavaScript in Blazor
[Inject] IJSRuntime JsRuntime { get; set; }
// Use Http request (Axios in JS) in Blazor
[Inject] HttpClient HttpClient { get; set; }
[Inject] IAIClassifierService AIService { get; set; }

[Parameter]
public string ParamId { get; set; }
public int Id { get { return Int32.Parse(ParamId); } }
private IEnumerable<Case> Elements;
private Case Element;
private int AiPredictionRiskScore;
private LeafletService LeafletService { get; set; }
private DotNetObjectReference<LeafletService> LeafLetServiceRef { get; set; }

protected override async void OnInitialized()
{
  Elements = await CaseServiceInstance.GetCases();
  Element = Elements.FirstOrDefault(x => x.CaseNumber == Id);

  // @TODO Prediction test
  AiPredictionRiskScore = await AIService.GetAIRecommendation("text");

  LeafletService = new LeafletService();
  LeafLetServiceRef = DotNetObjectReference.Create(LeafletService);

  LeafletService.Notify += OnNotify;
}

// Callback 
private async Task OnNotify()
{
  await InvokeAsync(StateHasChanged);
  Console.WriteLine($"{LeafletService.Longitude}, {LeafletService.Latitude}");
}

public void Dispose()
{
  LeafletService.Notify -= OnNotify;

  LeafLetServiceRef?.Dispose();
}

private async Task NavigateTo(string path)
{
  NavigationManager.NavigateTo(path, forceLoad: false);
}

// Action after Blazor render
protected override async Task OnAfterRenderAsync(bool firstRender)
{
  if (firstRender)
  {
    // Connection with JS script 
    await JsRuntime.InvokeAsync<object>(
      "leafletApiJsFunctions.initialize",
      Elements,
      LeafLetServiceRef);
  }
}


} 
